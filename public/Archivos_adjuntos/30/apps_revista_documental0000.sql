-- MySQL Script generated by MySQL Workbench
-- 03/07/19 18:34:14
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- -----------------------------------------------------
-- Schema apps_revista_documental
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema apps_revista_documental
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS apps_revista_documental DEFAULT CHARACTER SET utf8 ;
USE apps_revista_documental ;

-- -----------------------------------------------------
-- Table apps_revista_documental.cat_tipodocumento
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS cat_tipodocumento (
  id_cat_tipodocumento serial NOT NULL,
  documento varchar(45) NOT null,
  PRIMARY KEY (id_cat_tipodocumento))
;
-- -----------------------------------------------------
-- Table apps_revista_documental.cat_terminacion
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS cat_terminacion (
  id_cat_terminacion serial NOT NULL,
  color VARCHAR(20) NOT NULL,
  terminacion_a VARCHAR(1) NOT NULL,
  terminacion_b VARCHAR(1) NOT NULL,
  mes INT NOT NULL,
  anio INT NOT NULL,
  PRIMARY KEY (id_cat_terminacion))
;

-- -----------------------------------------------------
-- Table apps_revista_documental.cat_tipolicencia
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS cat_tipolicencia (
  id_cat_tipolicencia serial NOT NULL,
  tipo_licencia VARCHAR(45) NOT NULL,
  PRIMARY KEY (id_cat_tipolicencia))
;

-- -----------------------------------------------------
-- Table apps_revista_documental.licencia
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS licencia (
  id_licencia serial NOT NULL ,
  folio VARCHAR(45) NOT NULL,
  vigencia DATE NOT NULL,
  nombre VARCHAR(45) NOT NULL,
  paterno VARCHAR(45) NOT NULL,
  materno VARCHAR(45) NOT NULL,
  curp_rfc VARCHAR(45) NOT NULL,
  cat_tipolicencia_id INT NOT NULL,
  PRIMARY KEY (id_licencia),
  CONSTRAINT fk_licencia_cat_tipolicencia1
    FOREIGN KEY (cat_tipolicencia_id)
    REFERENCES cat_tipolicencia (id_cat_tipolicencia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

create INDEX fk_licencia_cat_tipolicencia1_idx on licencia(cat_tipolicencia_id ASC);
------------------------------------------------------------
--Tabla Vehiculo
------------------------------------------------------------
CREATE TABLE IF NOT EXISTS vehiculo (
  id_vehiculo serial NOT NULL,
  placa VARCHAR(45) NOT NULL,
  cvt_vehiculo VARCHAR(45) NOT NULL,
  tarjeta_circulacion VARCHAR(45) NOT NULL,
  nombre_propietario VARCHAR(45) NOT NULL,
  paterno_propietario VARCHAR(45) NOT NULL,
  materno_propietario VARCHAR(45) NOT NULL,
  curp_rfc VARCHAR(45) NOT NULL,
  serie_vehicular VARCHAR(45) NOT NULL,
  clave_vehicular VARCHAR(45) NOT NULL,
  motor VARCHAR(45) NOT NULL,
  marca VARCHAR(45) NOT NULL,
  linea VARCHAR(45) NOT NULL,
  modelo VARCHAR(45) NOT NULL,
  combustible VARCHAR(45) NOT NULL,
  email_propietario VARCHAR(45) NULL,
  telefono_propietario VARCHAR(45) NULL,
  licencia_id INT NOT NULL,
  cat_terminacion_id INT NOT NULL,
  fecha_registro TIMESTAMP NOT NULL,
  PRIMARY KEY (id_vehiculo),
  CONSTRAINT fk_vehiculo_cat_terminacion1
    FOREIGN KEY (cat_terminacion_id)
    REFERENCES cat_terminacion (id_cat_terminacion)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_vehiculo_licencia1
    FOREIGN KEY (licencia_id)
    REFERENCES licencia (id_licencia)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;
create UNIQUE INDEX placa_UNIQUE on vehiculo (placa ASC);
create UNIQUE INDEX serie_UNIQUE on vehiculo (serie_vehicular ASC);
create INDEX fk_vehiculo_cat_terminacion1_idx on vehiculo (cat_terminacion_id ASC);
create INDEX fk_vehiculo_licencia1_idx on vehiculo (licencia_id ASC);




-- -----------------------------------------------------
-- Table apps_revista_documental.cat_modulo
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS cat_modulo (
  id_cat_modulo serial NOT NULL ,
  modulo VARCHAR(45) NOT NULL,
  PRIMARY KEY (id_cat_modulo))
;
-- -----------------------------------------------------
-- Table apps_revista_documental.carga_documento
-- -----------------------------------------------------
CREATE TYPE carga_estatus AS ENUM ('PENDIENTE', 'CORRECTO', 'RECHAZADO', 'APELACION');
CREATE TABLE IF NOT EXISTS carga_documento (
  id_carga_documento serial NOT NULL,
  vehiculo_empresa_id INT NOT NULL,
  cat_tipodocumento_id INT NOT NULL,
  fecha_carga TIMESTAMP NOT NULL,
  estatus_carga carga_estatus NOT NULL,
  ip_carga VARCHAR(45) NULL,
  user_revision INT NULL DEFAULT NULL,
  descripcion_revision VARCHAR(255) NULL,
  PRIMARY KEY (id_carga_documento),
  CONSTRAINT fk_carga_documento_cat_tipo_documento
    FOREIGN KEY (cat_tipodocumento_id)
    REFERENCES cat_tipodocumento (id_cat_tipodocumento)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_carga_documento_user1
    FOREIGN KEY (user_revision)
    REFERENCES users (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_carga_documento_vehiculo_empresa1
    FOREIGN KEY (vehiculo_empresa_id)
    REFERENCES vehiculo_empresa (id_vehiculo_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;
  create INDEX fk_carga_documento_cat_tipo_documento_idx on carga_documento(cat_tipodocumento_id ASC);
  create INDEX fk_carga_documento_user1_idx on carga_documento(user_revision ASC);
  create INDEX fk_carga_documento_vehiculo_empresa1_idx on carga_documento(vehiculo_empresa_id ASC);

    -- -----------------------------------------------------
    -- Table apps_revista_documental.cat_tipopago
    -- -----------------------------------------------------
    CREATE TABLE IF NOT EXISTS cat_tipopago (
      id_cat_tipopago serial NOT NULL,
      concepto VARCHAR(45) NOT NULL,
      PRIMARY KEY (id_cat_tipopago))
    ;

    -- -----------------------------------------------------
    -- Table apps_revista_documental.pago
    -- -----------------------------------------------------
    CREATE TABLE IF NOT EXISTS pago (
      id_pago serial NOT NULL,
      linea_captura VARCHAR(45) NOT NULL,
      periodo VARCHAR(45) NOT NULL,
      fecha_pago VARCHAR(45) NOT NULL,
      descripcion VARCHAR(100) NOT NULL,
      cat_tipopago_id INT NOT NULL,
      vehiculo_empresa_id INT NOT NULL,
      PRIMARY KEY (id_pago),
      CONSTRAINT fk_pago_cat_tipopago1
        FOREIGN KEY (cat_tipopago_id)
        REFERENCES cat_tipopago (id_cat_tipopago)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION,
      CONSTRAINT fk_pago_vehiculo_empresa1
        FOREIGN KEY (vehiculo_empresa_id)
        REFERENCES vehiculo_empresa (id_vehiculo_empresa)
        ON DELETE NO ACTION
        ON UPDATE NO ACTION)
    ;
    create INDEX fk_pago_cat_tipopago1_idx on pago(cat_tipopago_id ASC);
    create INDEX fk_pago_vehiculo_empresa1_idx on pago(vehiculo_empresa_id ASC);
      -- -----------------------------------------------------
      -- Table roles
      -- -----------------------------------------------------
      CREATE TABLE IF NOT EXISTS roles (
        id serial NOT NULL,
        name VARCHAR(45) NOT NULL,
        display_name VARCHAR(45) NOT NULL,
        created_at TIMESTAMP NOT NULL,
        updated_at TIMESTAMP NULL,
        PRIMARY KEY (id))
      ;
      - -----------------------------------------------------
      -- Table role_user
      -- -----------------------------------------------------
      CREATE TABLE IF NOT EXISTS role_user (
        role_id INT NOT NULL,
        user_id INT NOT NULL,
        CONSTRAINT fk_table2_roles1
          FOREIGN KEY (role_id)
          REFERENCES roles (id)
          ON DELETE NO ACTION
          ON UPDATE NO ACTION,
        CONSTRAINT fk_table2_user1
          FOREIGN KEY (user_id)
          REFERENCES users (id)
          ON DELETE NO ACTION
          ON UPDATE NO ACTION)
      ;

      create INDEX fk_table2_roles1_idx on role_user(role_id ASC);
      create INDEX fk_table2_user1_idx on role_user(user_id ASC);


-- -----------------------------------------------------
-- Table users
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS users (
  id serial NOT NULL,
  username VARCHAR(45) NOT NULL,
  password VARCHAR(255) NOT NULL,
  nombre VARCHAR(45) NOT NULL,
  paterno VARCHAR(45) NULL,
  materno VARCHAR(45) NULL,
  curp VARCHAR(45) NULL,
  cat_modulo_id INT NOT NULL,
  remember_token VARCHAR(255) NULL,
  created_at TIMESTAMP NOT NULL,
  updated_at TIMESTAMP NULL,
  PRIMARY KEY (id),
  CONSTRAINT fk_user_cat_modulo1
    FOREIGN KEY (cat_modulo_id)
    REFERENCES cat_modulo (id_cat_modulo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

create INDEX fk_user_cat_modulo1_idx on users(cat_modulo_id ASC);
create UNIQUE INDEX curp_UNIQUE on users(curp ASC);


-- -----------------------------------------------------
-- Table apps_revista_documental.empresa
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS empresa (
  id_empresa serial NOT NULL,
  rfc VARCHAR(45) NOT NULL,
  razon_social VARCHAR(45) NOT NULL,
  users_id INT NOT NULL,
  PRIMARY KEY (id_empresa),
    CONSTRAINT fk_empresa_users1
    FOREIGN KEY (users_id)
    REFERENCES users (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;
create INDEX fk_empresa_users1_idx on empresa (users_id ASC);

-- -----------------------------------------------------
-- Table apps_revista_documental.vehiculo_empresa
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS vehiculo_empresa (
  id_vehiculo_empresa serial NOT NULL,
  vehiculo_id INT NOT NULL,
  empresa_id INT NOT NULL,
  fecha_ingreso TIMESTAMP NOT NULL,
  PRIMARY KEY (id_vehiculo_empresa),

  CONSTRAINT fk_vehiculo_empresa_vehiculo1
    FOREIGN KEY (vehiculo_id)
    REFERENCES vehiculo (id_vehiculo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_vehiculo_empresa_empresa1
    FOREIGN KEY (empresa_id)
    REFERENCES empresa (id_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

  create INDEX fk_vehiculo_empresa_vehiculo1_idx on vehiculo_empresa (vehiculo_id ASC);
 create INDEX fk_vehiculo_empresa_empresa1_idx on vehiculo_empresa(empresa_id ASC);





-- -----------------------------------------------------
-- Table folios
-- -----------------------------------------------------
CREATE TYPE folioestatus AS ENUM ('DISPONIBLE', 'OCUPADO', 'CANCELADO');
CREATE TABLE IF NOT EXISTS folios (
  id_folios INT NOT NULL,
  folio VARCHAR(45) NOT NULL,
  periodo INT NOT NULL,
  fecha_ingreso TIMESTAMP NOT NULL,
  estatusfolio folioestatus NOT NULL,
  cat_modulo_id INT NOT NULL,
  users_ingreso INT NOT NULL,
  users_utilizacion INT NOT NULL,
  fecha_utilizacion VARCHAR(45) NULL,
  observacion TEXT NULL,
  PRIMARY KEY (id_folios),
  CONSTRAINT fk_folios_cat_modulo1
    FOREIGN KEY (cat_modulo_id)
    REFERENCES cat_modulo (id_cat_modulo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_folios_users1
    FOREIGN KEY (users_ingreso)
    REFERENCES users (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_folios_users2
    FOREIGN KEY (users_utilizacion)
    REFERENCES users (id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;
create INDEX fk_folios_cat_modulo1_idx on folios (cat_modulo_id ASC);
create INDEX fk_folios_users1_idx on folios (users_ingreso ASC);
create INDEX fk_folios_users2_idx on folios (users_utilizacion ASC);



-- -----------------------------------------------------
-- Table apps_revista_documental.revista
-- -----------------------------------------------------
CREATE TYPE estado_documental AS ENUM ('PENDIENTE', 'APROBADO', 'RECHAZADO');
CREATE TYPE estado_fisica AS ENUM ('PENDIENTE', 'APROBADO', 'RECHAZADO');
CREATE TABLE IF NOT EXISTS revista (
  id_revista serial NOT NULL,
  vehiculo_empresa_id INT NOT NULL,
  documental estado_documental NOT NULL,
  fecha_documental TIMESTAMP NOT NULL,
  fisica estado_fisica NOT NULL,
  fecha_fisica VARCHAR(45) NULL,
  folio_id INT NULL,
  PRIMARY KEY (id_revista),
  CONSTRAINT fk_revista_folios1
    FOREIGN KEY (folio_id)
    REFERENCES folios (id_folios)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT fk_revista_vehiculo_empresa1
    FOREIGN KEY (vehiculo_empresa_id)
    REFERENCES vehiculo_empresa (id_vehiculo_empresa)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

  create INDEX fk_revista_folios1_idx on revista (folio_id ASC);
  create INDEX fk_revista_vehiculo_empresa1_idx on revista (vehiculo_empresa_id ASC);

-- -----------------------------------------------------
-- Table apps_revista_documental.verificacion_email
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS verificacion_email (
  id_verificacion_email serial NOT NULL,
  ip_registro VARCHAR(45) NOT NULL,
  email VARCHAR(45) NOT NULL,
  codigo VARCHAR(45) NOT NULL,
  ip_confirmacion VARCHAR(45) NULL,
  created_at TIMESTAMP NOT NULL,
  updated_at TIMESTAMP NULL,
  PRIMARY KEY (id_verificacion_email))
;
create INDEX IDX_email on verificacion_email (email ASC);

-- -----------------------------------------------------
-- Table apps_revista_documental.seguro
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS seguro (
  id_seguro serial NOT NULL,
  aseguradora VARCHAR(45) NOT NULL,
  folio_poliza VARCHAR(45) NOT NULL,
  vencimiento_poliza VARCHAR(45) NOT NULL,
  cobertura VARCHAR(45) NOT NULL,
  datos_generales_id INT NOT NULL,
  PRIMARY KEY (id_seguro),
  CONSTRAINT fk_seguro_generales1
    FOREIGN KEY (datos_generales_id)
    REFERENCES vehiculo (id_vehiculo)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;


  create INDEX fk_seguro_generales1_idx on seguro(datos_generales_id ASC);
